<?xml version="1.0" encoding="utf-8"?>
<nugget name="HCVN_ZVNMM_BUPA">
 <CLAS CLSNAME="ZCL_IM_BUPA_GENERAL_UPDATE" VERSION="1" LANGU="E" DESCRIPT="Imp. class for BAdI imp. ZBUPA_GENERAL_UPDATE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <implementing CLSNAME="ZCL_IM_BUPA_GENERAL_UPDATE" REFCLSNAME="IF_EX_BUPA_GENERAL_UPDATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="ZCL_IM_BUPA_GENERAL_UPDATE" CPDNAME="IF_EX_BUPA_GENERAL_UPDATE~CHANGE_BEFORE_UPDATE">
   <source>METHOD if_ex_bupa_general_update~change_before_update.

***    BREAK hq_tta.

***    CHECK sy-uname = &apos;XXHQ_TTA&apos;.
***
***    DATA: lv_count TYPE i.
***    ADD 1 TO lv_count.
***    CHECK lv_count = 1.
***
***    DATA: lt_but000_old TYPE TABLE OF but000,
***          lt_but000_new TYPE TABLE OF but000.
***
***    CLEAR: lt_but000_old[], lt_but000_new.
***
***    CALL FUNCTION &apos;BUPA_GENERAL_CALLBACK&apos;
***      TABLES
***        et_but000_old = lt_but000_old
***        et_but000_new = lt_but000_new.
***
***
***    LOOP AT it_changed_instances ASSIGNING FIELD-SYMBOL(&lt;bupa_guid&gt;).
***      LOOP AT lt_but000_new ASSIGNING FIELD-SYMBOL(&lt;b0n&gt;) WHERE partner_guid = &lt;bupa_guid&gt;.
***
***        &quot;(I really really tried to get it working with BUP_MEMORY_BUT000_FILL and similar..
***        &quot; ..but nothing works :(; same with BuPa BTE in tcode BUS7.. well, field-symbol be it)
***
***        DATA: lt_mem_but000 TYPE TABLE OF bus000___i. &quot;(def from LBUD0TOP)
***        FIELD-SYMBOLS: &lt;lt_mem_but000&gt; LIKE lt_mem_but000.
***        ASSIGN (&apos;(SAPLBUD0)MEM_BUT000[]&apos;) TO &lt;lt_mem_but000&gt;. CHECK sy-subrc = 0.
***
***        READ TABLE &lt;lt_mem_but000&gt; ASSIGNING FIELD-SYMBOL(&lt;mem_but000&gt;) WITH KEY partner = &lt;b0n&gt;-partner. CHECK sy-subrc = 0.
***
***        MOVE &apos;SRM&apos; TO &lt;mem_but000&gt;-bpkind.
***
***        BREAK hq_tta.
***
***
***
***
***      ENDLOOP.
***    ENDLOOP.








  ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCL_VNMM_CVI_CUSTOM_MAPPER" VERSION="1" LANGU="E" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <implementing CLSNAME="ZCL_VNMM_CVI_CUSTOM_MAPPER" REFCLSNAME="IF_EX_CVI_CUSTOM_MAPPER" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="ZCL_VNMM_CVI_CUSTOM_MAPPER" CPDNAME="IF_EX_CVI_CUSTOM_MAPPER~MAP_BP_TO_CUSTOMER">
   <source>method IF_EX_CVI_CUSTOM_MAPPER~MAP_BP_TO_CUSTOMER.
  endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_VNMM_CVI_CUSTOM_MAPPER" CPDNAME="IF_EX_CVI_CUSTOM_MAPPER~MAP_BP_TO_VENDOR">
   <source>METHOD if_ex_cvi_custom_mapper~map_bp_to_vendor.

***    BREAK hq_tta.

  ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <DEVC DEVCLASS="ZVNMM_BUPA" CTEXT="MM: BuPa Business Partners" LANGUAGE="E" MASTERLANG="E" KORRFLAG="X" PDEVCLASS="ZDEV" DLVUNIT="HOME" COMP_POSID="MM" COMPONENT="HLA0009510" NAMESPACE="/0CUST/" PARENTCL="ZVNMM" CREATED_BY="HQ_TTA" CREATED_ON="20200706" CHANGED_BY="HQ_TTA" CHANGED_ON="20200718" PROJECT_GUID="00000000000000000000000000000000"/>
 <FUGR AREA="ZVNMM_BUPA" SPRAS="E" AREAT="Business Partner Maintenace">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZVNMM_BUPA" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="700" RLOAD="E" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZVNMM_BUPATOP.                    &quot; Global Declarations
  INCLUDE LZVNMM_BUPAUXX.                    &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZVNMM_BUPAF...                    &quot; Subroutines
* INCLUDE LZVNMM_BUPAO...                    &quot; PBO-Modules
* INCLUDE LZVNMM_BUPAI...                    &quot; PAI-Modules
* INCLUDE LZVNMM_BUPAE...                    &quot; Events
* INCLUDE LZVNMM_BUPAP...                    &quot; Local class implement.
* INCLUDE LZVNMM_BUPAT99.                    &quot; ABAP Unit tests</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZVNMM_BUPATOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="700" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source></include_source>
   </include>
   <include NAME="LZVNMM_BUPATOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="700" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL ZVNMM_BUPA.                   &quot;MESSAGE-ID ..

* INCLUDE LZVNMM_BUPAD...                    &quot; Local class definition</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="ZDEMO_BUPA_EVENT_DCHCK" STEXT="ZDEMO_BUPA_EVENT_DCHCK">
    <fm_source>***  BREAK hq_tta.

***  CHECK sy-uname = &apos;HQ_TTA&apos;.

***
***  DATA: lt_but000_old TYPE TABLE OF but000,
***        lt_but000_new TYPE TABLE OF but000.
***
***  CLEAR: lt_but000_old[], lt_but000_new.
***
***  DATA e_objap         TYPE tbz1-objap.
***  DATA e_aktyp         TYPE tbz0k-aktyp.
***  DATA e_action        TYPE tbz0m-action.
***  DATA e_xsave         TYPE bus000flds-xsave.
***  DATA e_xinit         TYPE bus000flds-char1.
***  DATA e_xupdtask      TYPE boole-boole.
***  DATA e_xdinp         TYPE bus000flds-char1.
***  DATA e_xtest         TYPE boole-boole.
***  DATA e_xbapi         TYPE boole-boole.
***  DATA e_xfrgn         TYPE boole-boole.
***  DATA e_xhelp         TYPE boole-boole.
***  DATA e_frgid         TYPE tbz1i-frgid.
***  DATA e_valdt         TYPE bus000flds-valdt.
***  DATA e_nodata        TYPE bus000flds-char1.
***  DATA e_planchngnr    TYPE pcdhdr-planchngnr.
***  DATA e_planuser      TYPE pcdhdr-username.
***  DATA e_xchdoc        TYPE boole-boole.
***  DATA e_xarchive      TYPE boole-boole.
***  DATA e_xkeyvalue     TYPE boole-boole.
***  DATA e_xcheck_only   TYPE boole_d.
***  DATA e_xrecom        TYPE boole_d.
***  DATA e_dark_maint_di TYPE boole_d.
***  DATA t_rltyp         TYPE STANDARD TABLE OF bus0rltyp.
***  DATA t_rltyp_sel     TYPE STANDARD TABLE OF bus0rltyp.
***  DATA t_rltgr_sel     TYPE STANDARD TABLE OF bus0rltgr.
***  DATA t_appli         TYPE STANDARD TABLE OF bus0appli.
***  DATA t_tbz0q         TYPE STANDARD TABLE OF tbz0q.
***  DATA t_fldvl         TYPE STANDARD TABLE OF bus0fldval.
***
***  CALL FUNCTION &apos;BUS_PARAMETERS_ISSTA_GET&apos;
***    IMPORTING
***      e_objap         = e_objap
***      e_aktyp         = e_aktyp
***      e_action        = e_action
***      e_xsave         = e_xsave
***      e_xinit         = e_xinit
***      e_xupdtask      = e_xupdtask
***      e_xdinp         = e_xdinp
***      e_xtest         = e_xtest
***      e_xbapi         = e_xbapi
***      e_xfrgn         = e_xfrgn
***      e_xhelp         = e_xhelp
***      e_frgid         = e_frgid
***      e_valdt         = e_valdt
***      e_nodata        = e_nodata
***      e_planchngnr    = e_planchngnr
***      e_planuser      = e_planuser
***      e_xchdoc        = e_xchdoc
***      e_xarchive      = e_xarchive
***      e_xkeyvalue     = e_xkeyvalue
***      e_xcheck_only   = e_xcheck_only
***      e_xrecom        = e_xrecom
***      e_dark_maint_di = e_dark_maint_di
***    TABLES
***      t_rltyp         = t_rltyp
***      t_rltyp_sel     = t_rltyp_sel
***      t_rltgr_sel     = t_rltgr_sel
***      t_appli         = t_appli
***      t_tbz0q         = t_tbz0q
***      t_fldvl         = t_fldvl.
***
***
***
***  CALL FUNCTION &apos;BUPA_GENERAL_CALLBACK&apos;
***    TABLES
***      et_but000_old = lt_but000_old
***      et_but000_new = lt_but000_new.
***
***  CALL FUNCTION &apos;BUP_MEMORY_BUT000_CALLBACK&apos;
***    TABLES
***      et_but000_old = lt_but000_old
***      et_but000_new = lt_but000_new
****     ET_BUT000_TD_OLD       =
****     ET_BUT000_TD_NEW       =
****     ET_BP_IND_COM =
***    .
***
***  DATA e_but000      TYPE but000.
***  DATA e_but000_stat TYPE bus_istat.
***  DATA e_data        TYPE bussdi3-data.
***  DATA e_partner_ext TYPE bu_partner.
***  DATA et_but000     TYPE STANDARD TABLE OF but000.
***  DATA et_but000_old TYPE STANDARD TABLE OF but000.
***  CALL FUNCTION &apos;BUP_BUPA_BUT000_GET&apos;
***    IMPORTING
***      e_but000      = e_but000
***      e_but000_stat = e_but000_stat
***      e_data        = e_data
***      e_partner_ext = e_partner_ext
***    TABLES
***      et_but000     = et_but000
***      et_but000_old = et_but000_old.
***
***  DATA is_but000              TYPE bus000___i.
***  DATA is_but000_old          TYPE bus000___i.
****DATA IV_SWAP                TYPE BOOLE-BOOLE.
****DATA IV_CHANGE_IND_COM_DATA TYPE FLAG.
****DATA IT_BUT000_TD_NEW       TYPE STANDARD TABLE OF VBUT000_TD.
****DATA IT_BUT000_TD_OLD       TYPE STANDARD TABLE OF VBUT000_TD.
***
***  MOVE: e_but000      TO is_but000-but000,
***        e_but000_stat TO is_but000-bus_istat.
***  MOVE: is_but000 TO is_but000_old.
***
***  &quot;update
***  MOVE: &apos;SRM&apos; TO is_but000-but000-bpkind.
***
***  CALL FUNCTION &apos;BUP_MEMORY_BUT000_FILL&apos;
***    EXPORTING
***      is_but000       = is_but000
***      is_but000_old   = is_but000_old
***      iv_swap         = &apos;X&apos;
****     IV_CHANGE_IND_COM_DATA       = IV_CHANGE_IND_COM_DATA
****         TABLES
****     IT_BUT000_TD_NEW             = IT_BUT000_TD_NEW
****     IT_BUT000_TD_OLD             = IT_BUT000_TD_OLD
***    EXCEPTIONS
***      parameter_error = 1
***      OTHERS          = 2.
***  IF sy-subrc &lt;&gt; 0.
**** Implement suitable error handling here
***  ENDIF.
***
***  DATA lt2_but000_old    TYPE STANDARD TABLE OF but000.
***  DATA lt2_but000_new    TYPE STANDARD TABLE OF but000.
****DATA ET_BUT000_TD_OLD TYPE STANDARD TABLE OF BUT000_TD.
****DATA ET_BUT000_TD_NEW TYPE STANDARD TABLE OF BUT000_TD.
****DATA ET_BP_IND_COM    TYPE STANDARD TABLE OF BUPA_PARTNER.
***
***  CALL FUNCTION &apos;BUP_MEMORY_BUT000_CALLBACK&apos;
***    TABLES
***      et_but000_old = lt2_but000_old
***      et_but000_new = lt2_but000_new
****     ET_BUT000_TD_OLD       = ET_BUT000_TD_OLD
****     ET_BUT000_TD_NEW       = ET_BUT000_TD_NEW
****     ET_BP_IND_COM = ET_BP_IND_COM
***    .</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PROG NAME="ZVNMM_BUPA_SYNC_PORG" VARCL="X" SUBC="1" RMAND="700" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="S00" ENTRY="BP Vendor selection" LENGTH="70 "/>
    <textElement ID="I" KEY="S01" ENTRY="processing" LENGTH="70 "/>
    <textElement ID="R" ENTRY="MM: BP Vendor synchronize PurchOrg" LENGTH="34 "/>
    <textElement ID="S" KEY="PA_EKO1" ENTRY="        source Purchasing Organization" LENGTH="38 "/>
    <textElement ID="S" KEY="PA_EKO2" ENTRY="        target Purchasing Organization" LENGTH="38 "/>
    <textElement ID="S" KEY="PX_CREA" ENTRY="        create new" LENGTH="23 "/>
    <textElement ID="S" KEY="PX_NDELE" ENTRY="        exclude deleted/blocked" LENGTH="31 "/>
    <textElement ID="S" KEY="PX_TEST" ENTRY="        test mode (no commit)" LENGTH="29 "/>
    <textElement ID="S" KEY="PX_UPDA" ENTRY="        update existing" LENGTH="23 "/>
    <textElement ID="S" KEY="SO_KTOKK" ENTRY="D       ." LENGTH="21 "/>
    <textElement ID="S" KEY="SO_LIFNR" ENTRY="D       ." LENGTH="14 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report ZVNMM_BUPA_SYNC
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zvnmm_bupa_sync_porg.

*&amp; &quot;SAP-2891(HQ_TTa) BP Vendor sync POrg VN01 to VN02
*&amp;   context:
*&amp;            vendors maintaine on VN01, should be automated to VN02
*&amp;   feature:
*&amp;            select BP Vendor data from POrg VN01..
*&amp;            ..sync(create/update) to VN02

**********************************************************************
*&amp; selection screen
TABLES: lfa1.
SELECTION-SCREEN: BEGIN OF BLOCK s00 WITH FRAME TITLE TEXT-s00. &quot;block: BP Vendor selection
  SELECT-OPTIONS: so_lifnr FOR lfa1-lifnr,
                  so_ktokk FOR lfa1-ktokk.
  PARAMETERS    : px_ndele TYPE xfeld DEFAULT &apos;X&apos;.
SELECTION-SCREEN: END   OF BLOCK s00.
SELECTION-SCREEN: BEGIN OF BLOCK s01 WITH FRAME TITLE TEXT-s01. &quot;block: processing
  PARAMETERS: pa_eko1 TYPE lfm1-ekorg DEFAULT &apos;VN01&apos; OBLIGATORY,
              pa_eko2 TYPE lfm1-ekorg DEFAULT &apos;VN02&apos; OBLIGATORY.
  PARAMETERS: px_test TYPE xfeld AS CHECKBOX DEFAULT &apos;X&apos;,
              px_crea TYPE xfeld AS CHECKBOX DEFAULT &apos;X&apos;,
              px_upda TYPE xfeld AS CHECKBOX DEFAULT &apos; &apos;.
SELECTION-SCREEN: END   OF BLOCK s01.

**********************************************************************
*&amp; selection
START-OF-SELECTION.

  &quot;
  WRITE: / &apos;source= &apos;, pa_eko1,
         / &apos;target= &apos;, pa_eko2.

  &quot;porg-source
  SELECT lfm1~lifnr, lfa1~name1, lfm1~ekorg,
         lfa1~loevm AS lfa1_leovm,
         lfm1~loevm AS lfm1_loevm,
         lfa1~sperm AS lfa1_sperm,
         lfm1~sperm AS lfm1_sperm

         INTO TABLE @DATA(lt_eko1) FROM            lfa1 AS lfa1
                                        INNER JOIN lfm1 AS lfm1 ON lfm1~lifnr = lfa1~lifnr
   WHERE lfa1~ktokk IN @so_ktokk
     AND lfa1~lifnr IN @so_lifnr
     AND lfm1~ekorg EQ @pa_eko1.

  &quot;porg-target
  SELECT lfm1~lifnr, lfm1~ekorg INTO TABLE @DATA(lt_eko2) FROM           lfa1 AS lfa1
                                                              INNER JOIN lfm1 AS lfm1 ON lfm1~lifnr = lfa1~lifnr
   WHERE lfa1~ktokk IN @so_ktokk
     AND lfa1~lifnr IN @so_lifnr
     AND lfm1~ekorg EQ @pa_eko2.

  &quot;clear blocked/deleted
  IF px_ndele EQ &apos;X&apos;.
    DELETE lt_eko1 WHERE lfa1_leovm IS NOT INITIAL
                      OR lfm1_loevm IS NOT INITIAL
                      OR lfa1_sperm IS NOT INITIAL
                      OR lfm1_sperm IS NOT INITIAL.
  ENDIF.

  &quot;clear source if not update (only create)
  IF px_upda NE &apos;X&apos;.
    LOOP AT lt_eko2 ASSIGNING FIELD-SYMBOL(&lt;eko2&gt;).
      DELETE lt_eko1 WHERE lifnr = &lt;eko2&gt;-lifnr.
      WRITE: / &apos;vendor= &apos;, &lt;eko2&gt;-lifnr, &lt;eko2&gt;-ekorg, &apos; already existing&apos;.
    ENDLOOP.
  ENDIF.

  &quot;synchro
  DATA: lt_bapiret TYPE bapiretm.
  LOOP AT lt_eko1 ASSIGNING FIELD-SYMBOL(&lt;eko1&gt;).

    &quot;get porg-source
    DATA: vmds1 TYPE vmds_ei_main,
          cvims TYPE cvis_message.
    CLEAR: vmds1, cvims.
    APPEND INITIAL LINE TO vmds1-vendors ASSIGNING FIELD-SYMBOL(&lt;vendors&gt;).
    &lt;vendors&gt;-header-object_instance-lifnr = &lt;eko1&gt;-lifnr.
    &lt;vendors&gt;-header-object_task           = &apos;M&apos;.

    vmd_ei_api_extract=&gt;get_data( EXPORTING is_master_data        = vmds1
                                  IMPORTING es_master_data        = vmds1
                                            es_error              = cvims ).

    &quot;error: message and next loop
    IF cvims-is_error = &apos;X&apos;.
      LOOP AT cvims-messages ASSIGNING FIELD-SYMBOL(&lt;msg&gt;).
        WRITE: / &apos;vendor= &apos;, &lt;eko1&gt;-lifnr, &apos; error=&apos;, &lt;msg&gt;-type, &lt;msg&gt;-id, &lt;msg&gt;-number, &lt;msg&gt;-message.
      ENDLOOP.
      CONTINUE.
    ENDIF.

    &quot;put to porg-target
    LOOP AT vmds1-vendors ASSIGNING &lt;vendors&gt;.
      DELETE &lt;vendors&gt;-purchasing_data-purchasing WHERE data_key NE pa_eko1. &quot;(remove all non-source)

      &quot;update target-like-source
      READ TABLE &lt;vendors&gt;-purchasing_data-purchasing INDEX 1 ASSIGNING FIELD-SYMBOL(&lt;purchasing&gt;). CHECK sy-subrc = 0.
      MOVE: pa_eko2 TO &lt;purchasing&gt;-data_key,
            &apos;M&apos;     TO &lt;purchasing&gt;-task.
      MOVE: &apos;&apos;      TO &lt;vendors&gt;-purchasing_data-current_state,
            &apos;M&apos;     TO &lt;vendors&gt;-header-object_task.

      &quot;fill all x-struc
      DATA: lo_strd TYPE REF TO cl_abap_structdescr.
      lo_strd ?= cl_abap_typedescr=&gt;describe_by_data( &lt;purchasing&gt;-datax ) .
      DATA(lt_comp) = lo_strd-&gt;get_components( ).
      LOOP AT lt_comp ASSIGNING FIELD-SYMBOL(&lt;comp&gt;).
        ASSIGN COMPONENT &lt;comp&gt;-name OF STRUCTURE &lt;purchasing&gt;-datax TO FIELD-SYMBOL(&lt;xfield&gt;).
        MOVE: &apos;X&apos; TO &lt;xfield&gt;.
      ENDLOOP.

    ENDLOOP.

    &quot;update
    CLEAR: cvims.
    vmd_ei_api=&gt;maintain( EXPORTING iv_test_run           = px_test
                                    is_master_data        = vmds1
                          IMPORTING es_error              = cvims
    ).
***    vmd_ei_api=&gt;maintain_bapi(
***      EXPORTING
***        iv_test_run              = px_test
***        iv_collect_messages      = &apos;X&apos;
***        is_master_data           = vmds1
***      IMPORTING
****        es_master_data_correct   = es_master_data_correct   &quot; Vendor Total Data Without Errors
****        es_message_correct       = es_message_correct       &quot; Error Indicator and System Messages for Data Without Errors
****        es_master_data_defective = es_master_data_defective &quot; Vendor Total Data with Errors
***        es_message_defective     = cvims
***    ).

    IF cvims-is_error = &apos;X&apos;.
      LOOP AT cvims-messages ASSIGNING &lt;msg&gt;.
        WRITE: / &apos;vendor= &apos;, &lt;eko1&gt;-lifnr, &apos; error=&apos;, &lt;msg&gt;-type, &lt;msg&gt;-id, &lt;msg&gt;-number, &lt;msg&gt;-message.
      ENDLOOP.
      CONTINUE.
    ELSE.
      WRITE: / &apos;vendor= &apos;, &lt;eko1&gt;-lifnr, &apos; synchronized&apos;.
    ENDIF.


    CASE px_test.
      WHEN &apos;X&apos;. CALL FUNCTION &apos;BAPI_TRANSACTION_ROLLBACK&apos;.                    WRITE:   &apos;(rollback)&apos;.
      WHEN &apos; &apos;. CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos; EXPORTING wait = &apos;X&apos;. WRITE:   &apos;(commit  )&apos;.
    ENDCASE.


  ENDLOOP.</source>
 </PROG>
 <TRAN TCODE="ZVNMM_BUPA_SYNC_PORG" PGMNA="ZVNMM_BUPA_SYNC_PORG" DYPNO="1000" TYPE="R" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X" MASTERLANG="E" TTEXT="MM: BP Vendor synchronize PurchOrg"/>
 <VIEW VIEWNAME="ZVNMM_BUPA_VEND" AS4LOCAL="A" AS4VERS="0000" DDLANGUAGE="E" AGGTYPE="V" AUTHCLASS="00" ROOTTAB="BUT000" DDTEXT="MM: view BuPa » Vendor" VIEWCLASS="D" VIEWGRANT="R">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd26v VIEWNAME="ZVNMM_BUPA_VEND" TABNAME="BUT000" TABPOS="0001" FORTABNAME="BUT000"/>
  <dd26v VIEWNAME="ZVNMM_BUPA_VEND" TABNAME="CVI_VEND_LINK" TABPOS="0002"/>
  <dd27p VIEWNAME="ZVNMM_BUPA_VEND" OBJPOS="0001" DDLANGUAGE="E" VIEWFIELD="PARTNER" TABNAME="BUT000" FIELDNAME="PARTNER" KEYFLAG="X" ROLLNAME="BU_PARTNER" ROLLNAMEVI="BU_PARTNER" MEMORYID="BPA" DOMNAME="BU_PARTNER" DATATYPE="CHAR" FLENGTH="000010" SHLPORIGIN="D" SHLPNAME="BUPA" SHLPFIELD="PARTNER" ENTITYTAB="BUT000" INTTYPE="C" INTLEN="000020" LOGFLAG="X" HEADLEN="16" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000010" DECIMALS="000000" CONVEXIT="ALPHA" DDTEXT="Business Partner Number" REPTEXT="Business Partner" SCRTEXT_S="Partner" SCRTEXT_M="BusinessPartner" SCRTEXT_L="Business Partner" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZVNMM_BUPA_VEND" OBJPOS="0002" DDLANGUAGE="E" VIEWFIELD="TYPE" TABNAME="BUT000" FIELDNAME="TYPE" KEYFLAG="X" ROLLNAME="BU_TYPE" ROLLNAMEVI="BU_TYPE" MEMORYID="BPY" DOMNAME="BU_TYPE" DATATYPE="CHAR" FLENGTH="000001" SHLPORIGIN="F" INTTYPE="C" INTLEN="000002" LOGFLAG="X" HEADLEN="04" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" DDTEXT="Business Partner Category" REPTEXT="BPC" SCRTEXT_S="Partn.Cat." SCRTEXT_M="Partn.Cat." SCRTEXT_L="BP Category" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZVNMM_BUPA_VEND" OBJPOS="0003" DDLANGUAGE="E" VIEWFIELD="PARTNER_GUID" TABNAME="BUT000" FIELDNAME="PARTNER_GUID" KEYFLAG="X" ROLLNAME="BU_PARTNER_GUID" ROLLNAMEVI="BU_PARTNER_GUID" DOMNAME="SYSUUID" DATATYPE="RAW" FLENGTH="000016" INTTYPE="X" INTLEN="000016" LOGFLAG="X" HEADLEN="32" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" OUTPUTLEN="000032" DECIMALS="000000" DDTEXT="Business Partner GUID" REPTEXT="Business Partner GUID" SCRTEXT_S="BP GUID" SCRTEXT_M="BP GUID" SCRTEXT_L="Business Partner GUID" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd27p VIEWNAME="ZVNMM_BUPA_VEND" OBJPOS="0004" DDLANGUAGE="E" VIEWFIELD="VENDOR" TABNAME="CVI_VEND_LINK" FIELDNAME="VENDOR" KEYFLAG="X" ROLLNAME="LIFNR" ROLLNAMEVI="LIFNR" MEMORYID="LIF" DOMNAME="LIFNR" DATATYPE="CHAR" FLENGTH="000010" SHLPORIGIN="D" SHLPNAME="KRED_C" SHLPFIELD="LIFNR" ENTITYTAB="LFA1" INTTYPE="C" INTLEN="000020" LOGFLAG="X" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000010" DECIMALS="000000" CONVEXIT="ALPHA" DDTEXT="Account Number of Vendor or Creditor" REPTEXT="Vendor" SCRTEXT_S="Vendor" SCRTEXT_M="Vendor" SCRTEXT_L="Vendor" OUTPUTSTYLE="00" EXVFLENGTH="000000" EXVDECIMALS="000000"/>
  <dd28j VIEWNAME="ZVNMM_BUPA_VEND" LTAB="CVI_VEND_LINK" LFIELD="CLIENT" OPERATOR="EQ" RTAB="BUT000" RFIELD="CLIENT" SOURCE="S"/>
  <dd28j VIEWNAME="ZVNMM_BUPA_VEND" LTAB="CVI_VEND_LINK" LFIELD="PARTNER_GUID" OPERATOR="EQ" RTAB="BUT000" RFIELD="PARTNER_GUID" SOURCE="S"/>
 </VIEW>
</nugget>
